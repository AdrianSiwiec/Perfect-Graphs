digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	"(below main)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n(below main)\n99.90%\n(0.00%)\n1×"];
	"(below main)" -> main [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.89%\n1×", labeldistance="4.00", penwidth="4.00"];
	"0x0000000000000c20" [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="ld-2.24.so\n0x0000000000000c20\n99.99%\n(0.00%)\n0×"];
	"0x0000000000000c20" -> "_start" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.90%\n1×", labeldistance="4.00", penwidth="4.00"];
	"Graph::calculateNeighboursLists()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::calculateNeighboursLists()\n0.67%\n(0.27%)\n1994×"];
	"Graph::calculateNeighboursLists()" -> "void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.39%\n35324×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getComplement() const" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::getComplement() const\n0.86%\n(0.17%)\n997×"];
	"Graph::getComplement() const" -> "Graph::calculateNeighboursLists()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.54%\n997×", labeldistance="0.50", penwidth="0.50"];
	"_int_free" [color="#0c688a", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n_int_free\n18.25%\n(18.22%)\n5692882×"];
	"_int_malloc" [color="#0c5686", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n_int_malloc\n15.07%\n(15.07%)\n5692889×"];
	"_start" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\n_start\n99.90%\n(0.00%)\n1×"];
	"_start" -> "(below main)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.90%\n1×", labeldistance="4.00", penwidth="4.00"];
	"containsJewelNaive(Graph const&)" [color="#0d4482", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsJewelNaive(Graph const&)\n11.77%\n(0.00%)\n2×"];
	"containsJewelNaive(Graph const&)" -> "findJewelNaive(Graph const&)" [arrowsize="0.35", color="#0d4482", fontcolor="#0d4482", fontsize="10.00", label="11.77%\n2×", labeldistance="0.50", penwidth="0.50"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" [color="#92cf07", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)\n67.46%\n(0.46%)\n277×"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" -> "findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" [arrowsize="0.35", color="#0d1c77", fontcolor="#0d1c77", fontsize="10.00", label="3.65%\n24930×", labeldistance="0.50", penwidth="0.50"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" -> "nextPathInPlace(Graph const&, vec<int>&, int, bool)" [arrowsize="0.79", color="#6dc808", fontcolor="#6dc808", fontsize="10.00", label="63.19%\n121591×", labeldistance="2.53", penwidth="2.53"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n24891×", labeldistance="0.50", penwidth="0.50"];
	"containsT1(Graph const&)" [color="#0c5285", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsT1(Graph const&)\n14.37%\n(0.00%)\n2×"];
	"containsT1(Graph const&)" -> "findT1(Graph const&)" [arrowsize="0.38", color="#0c5285", fontcolor="#0c5285", fontsize="10.00", label="14.37%\n2×", labeldistance="0.57", penwidth="0.57"];
	"findJewelNaive(Graph const&)" [color="#0d4482", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindJewelNaive(Graph const&)\n11.77%\n(0.10%)\n2×"];
	"findJewelNaive(Graph const&)" -> "isJewel(Graph const&, vec<int> const&)" [arrowsize="0.35", color="#0d4282", fontcolor="#0d4282", fontsize="10.00", label="11.45%\n200000×", labeldistance="0.50", penwidth="0.50"];
	"findJewelNaive(Graph const&)" -> "nextTupleInPlace(vec<int>&, int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n200000×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" [color="#0d1c77", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)\n3.68%\n(0.90%)\n25204×"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n25204×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" -> "std::_Deque_base<int, std::allocator<int> >::_M_initialize_map(unsigned long)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.95%\n50408×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" -> "std::_Deque_base<int, std::allocator<int> >::~_Deque_base()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.54%\n50408×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" -> "std::_Function_handler<bool (int), containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)::{lambda(int)#1}>::_M_invoke(std::_Any_data const&, int&&)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.55%\n456869×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" -> "void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.52%\n51194×", labeldistance="0.50", penwidth="0.50"];
	"findT1(Graph const&)" [color="#0c5285", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindT1(Graph const&)\n14.37%\n(0.10%)\n2×"];
	"findT1(Graph const&)" -> "isT1(Graph const&, vec<int> const&)" [arrowsize="0.37", color="#0c5085", fontcolor="#0c5085", fontsize="10.00", label="14.06%\n200000×", labeldistance="0.56", penwidth="0.56"];
	"findT1(Graph const&)" -> "nextTupleInPlace(vec<int>&, int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n200000×", labeldistance="0.50", penwidth="0.50"];
	free [color="#0c808f", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\nfree\n21.98%\n(3.72%)\n5692884×"];
	free -> "_int_free" [arrowsize="0.43", color="#0c688a", fontcolor="#0c688a", fontsize="10.00", label="18.25%\n5692882×", labeldistance="0.73", penwidth="0.73"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetComponentsOfInducedGraph(Graph const&, vec<int> const&)\n0.95%\n(0.04%)\n996×"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n33440×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" [color="#0d257a", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetPossibleNearCleaners(Graph const&)\n5.54%\n(0.73%)\n2×"];
	"getPossibleNearCleaners(Graph const&)" -> "getXforRelevantTriple(Graph const&, vec<int>)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.54%\n738×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.94%\n56916×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.156]" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.49%\n57704×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique_<int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_const_iterator<int>, int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.157]" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.55%\n54504×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.56%\n26676×", labeldistance="0.50", penwidth="0.50"];
	"getXforRelevantTriple(Graph const&, vec<int>)" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetXforRelevantTriple(Graph const&, vec<int>)\n1.54%\n(0.02%)\n738×"];
	"getXforRelevantTriple(Graph const&, vec<int>)" -> "Graph::getComplement() const" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.64%\n738×", labeldistance="0.50", penwidth="0.50"];
	"getXforRelevantTriple(Graph const&, vec<int>)" -> "getComponentsOfInducedGraph(Graph const&, vec<int> const&)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.69%\n738×", labeldistance="0.50", penwidth="0.50"];
	"isAPath(Graph const&, vec<int> const&, bool)" [color="#5ec608", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisAPath(Graph const&, vec<int> const&, bool)\n61.38%\n(4.39%)\n1315305×"];
	"isAPath(Graph const&, vec<int> const&, bool)" -> "isDistinctValues(vec<int> const&)" [arrowsize="0.75", color="#3cc009", fontcolor="#3cc009", fontsize="10.00", label="56.98%\n1315305×", labeldistance="2.28", penwidth="2.28"];
	"isDistinctValues(vec<int> const&)" [color="#aed306", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisDistinctValues(vec<int> const&)\n70.52%\n(4.24%)\n1515305×"];
	"isDistinctValues(vec<int> const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [arrowsize="0.46", color="#0c7a8e", fontcolor="#0c7a8e", fontsize="10.00", label="21.07%\n1515305×", labeldistance="0.84", penwidth="0.84"];
	"isDistinctValues(vec<int> const&)" -> "std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)" [arrowsize="0.67", color="#0aaf2a", fontcolor="#0aaf2a", fontsize="10.00", label="45.21%\n4947535×", labeldistance="1.81", penwidth="1.81"];
	"isJewel(Graph const&, vec<int> const&)" [color="#0d4282", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisJewel(Graph const&, vec<int> const&)\n11.45%\n(2.12%)\n200000×"];
	"isJewel(Graph const&, vec<int> const&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1f78", fontcolor="#0d1f78", fontsize="10.00", label="4.18%\n819020×", labeldistance="0.50", penwidth="0.50"];
	"isJewel(Graph const&, vec<int> const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [arrowsize="0.35", color="#0d1d78", fontcolor="#0d1d78", fontsize="10.00", label="3.91%\n200000×", labeldistance="0.50", penwidth="0.50"];
	"isJewel(Graph const&, vec<int> const&)" -> "std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.13%\n819019×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisPerfectGraph(Graph const&)\n99.89%\n(0.00%)\n1×"];
	"isPerfectGraph(Graph const&)" -> "containsJewelNaive(Graph const&)" [arrowsize="0.35", color="#0d4482", fontcolor="#0d4482", fontsize="10.00", label="11.77%\n2×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" [arrowsize="0.82", color="#92cf07", fontcolor="#92cf07", fontsize="10.00", label="67.46%\n277×", labeldistance="2.70", penwidth="2.70"];
	"isPerfectGraph(Graph const&)" -> "containsT1(Graph const&)" [arrowsize="0.38", color="#0c5285", fontcolor="#0c5285", fontsize="10.00", label="14.37%\n2×", labeldistance="0.57", penwidth="0.57"];
	"isPerfectGraph(Graph const&)" -> "getPossibleNearCleaners(Graph const&)" [arrowsize="0.35", color="#0d257a", fontcolor="#0d257a", fontsize="10.00", label="5.54%\n2×", labeldistance="0.50", penwidth="0.50"];
	"isT1(Graph const&, vec<int> const&)" [color="#0c5085", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisT1(Graph const&, vec<int> const&)\n14.06%\n(0.52%)\n200000×"];
	"isT1(Graph const&, vec<int> const&)" -> "isDistinctValues(vec<int> const&)" [arrowsize="0.37", color="#0d4d84", fontcolor="#0d4d84", fontsize="10.00", label="13.54%\n200000×", labeldistance="0.54", penwidth="0.54"];
	main [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nmain\n99.89%\n(0.00%)\n1×"];
	main -> "testWithStats(Graph const&, bool)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.89%\n1×", labeldistance="4.00", penwidth="4.00"];
	malloc [color="#0c968d", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\nmalloc\n26.57%\n(11.42%)\n5692927×"];
	malloc -> "_int_malloc" [arrowsize="0.39", color="#0c5686", fontcolor="#0c5686", fontsize="10.00", label="15.07%\n5692888×", labeldistance="0.60", penwidth="0.60"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool)" [color="#6dc808", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nnextPathInPlace(Graph const&, vec<int>&, int, bool)\n63.19%\n(1.10%)\n121591×"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool)" -> "isAPath(Graph const&, vec<int> const&, bool)" [arrowsize="0.78", color="#5dc608", fontcolor="#5dc608", fontsize="10.00", label="61.27%\n1313685×", labeldistance="2.45", penwidth="2.45"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool)" -> "nextTupleInPlace(vec<int>&, int)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.81%\n1315000×", labeldistance="0.50", penwidth="0.50"];
	"nextTupleInPlace(vec<int>&, int)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nnextTupleInPlace(vec<int>&, int)\n1.06%\n(1.06%)\n1715000×"];
	"operator delete(void*)" [color="#0c8390", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\noperator delete(void*)\n22.47%\n(0.50%)\n5692880×"];
	"operator delete(void*)" -> free [arrowsize="0.47", color="#0c808f", fontcolor="#0c808f", fontsize="10.00", label="21.98%\n5692881×", labeldistance="0.88", penwidth="0.88"];
	"operator new(unsigned long)" [color="#0c9980", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\noperator new(unsigned long)\n29.46%\n(2.98%)\n5692886×"];
	"operator new(unsigned long)" -> malloc [arrowsize="0.51", color="#0c958d", fontcolor="#0c958d", fontsize="10.00", label="26.48%\n5692888×", labeldistance="1.06", penwidth="1.06"];
	"std::_Deque_base<int, std::allocator<int> >::_M_initialize_map(unsigned long)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Deque_base<int, std::allocator<int> >::_M_initialize_map(unsigned long)\n0.95%\n(0.12%)\n50408×"];
	"std::_Deque_base<int, std::allocator<int> >::_M_initialize_map(unsigned long)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.82%\n100816×", labeldistance="0.50", penwidth="0.50"];
	"std::_Deque_base<int, std::allocator<int> >::~_Deque_base()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Deque_base<int, std::allocator<int> >::~_Deque_base()\n0.54%\n(0.05%)\n50408×"];
	"std::_Deque_base<int, std::allocator<int> >::~_Deque_base()" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.48%\n100816×", labeldistance="0.50", penwidth="0.50"];
	"std::_Function_handler<bool (int), containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)::{lambda(int)#1}>::_M_invoke(std::_Any_data const&, int&&)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Function_handler<bool (int), containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)::{lambda(int)#1}>::_M_invoke(std::_Any_data const&, int&&)\n0.55%\n(0.55%)\n456869×"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [color="#0c9590", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)\n25.95%\n(2.43%)\n1776297×"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" -> "operator delete(void*)" [arrowsize="0.37", color="#0d4d84", fontcolor="#0d4d84", fontsize="10.00", label="13.54%\n3450436×", labeldistance="0.54", penwidth="0.54"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2" [arrowsize="0.35", color="#0d3a80", fontcolor="#0d3a80", fontsize="10.00", label="9.97%\n3450436×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2" [color="#0d3a80", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2\n9.97%\n(2.28%)\n5409633×"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2" -> "operator delete(void*)" [arrowsize="0.35", color="#0d2f7d", fontcolor="#0d2f7d", fontsize="10.00", label="7.69%\n1959197×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2" [arrowsize="0.35", color="#0d3a80", fontcolor="#0d3a80", fontsize="10.00", label="1959197×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)" [color="#0d287b", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)\n6.23%\n(5.95%)\n5034783×"];
	"std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [color="#0d2a7b", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\nstd::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)\n6.68%\n(6.68%)\n5324321×"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.215]" [color="#0ba262", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.215]\n35.57%\n(7.78%)\n4390689×"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.215]" -> "operator new(unsigned long)" [arrowsize="0.47", color="#0c8290", fontcolor="#0c8290", fontsize="10.00", label="22.40%\n4390689×", labeldistance="0.90", penwidth="0.90"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.215]" -> "std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [arrowsize="0.35", color="#0d247a", fontcolor="#0d247a", fontsize="10.00", label="5.39%\n4390689×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.156]" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.156]\n0.95%\n(0.20%)\n114196×"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.156]" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.58%\n114196×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.156]" -> "std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n114196×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique_<int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_const_iterator<int>, int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.157]" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique_<int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_const_iterator<int>, int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.157]\n0.57%\n(0.04%)\n56492×"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique_<int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_const_iterator<int>, int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.157]" -> "std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.156]" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.46%\n56492×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)\n0.57%\n(0.06%)\n26952×"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.23%\n44264×", labeldistance="0.50", penwidth="0.50"];
	"std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)" [color="#0aaf2a", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)\n45.23%\n(3.57%)\n4949031×"];
	"std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)" [arrowsize="0.35", color="#0d277b", fontcolor="#0d277b", fontsize="10.00", label="6.09%\n4949031×", labeldistance="0.50", penwidth="0.50"];
	"std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)" -> "std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.215]" [arrowsize="0.60", color="#0ba262", fontcolor="#0ba262", fontsize="10.00", label="35.56%\n4389331×", labeldistance="1.42", penwidth="1.42"];
	"testWithStats(Graph const&, bool)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ntestWithStats(Graph const&, bool)\n99.89%\n(0.00%)\n1×"];
	"testWithStats(Graph const&, bool)" -> "isPerfectGraph(Graph const&)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.89%\n1×", labeldistance="4.00", penwidth="4.00"];
	"void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nvoid std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)\n1.02%\n(0.24%)\n99960×"];
	"void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.22%\n56083×", labeldistance="0.50", penwidth="0.50"];
	"void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.53%\n99960×", labeldistance="0.50", penwidth="0.50"];
}
