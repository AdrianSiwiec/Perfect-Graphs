digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	"(below main)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n(below main)\n99.95%\n(0.00%)\n1×"];
	"(below main)" -> main [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.95%\n1×", labeldistance="4.00", penwidth="4.00"];
	"0x0000000000000c20" [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="ld-2.24.so\n0x0000000000000c20\n100.00%\n(0.00%)\n0×"];
	"0x0000000000000c20" -> "_start" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.95%\n1×", labeldistance="4.00", penwidth="4.00"];
	"Graph::Graph(int)" [color="#0d1976", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::Graph(int)\n2.84%\n(0.22%)\n21864×"];
	"Graph::Graph(int)" -> "Graph::calculateFirstNextNeighbours()" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.33%\n21864×", labeldistance="0.50", penwidth="0.50"];
	"Graph::Graph(int)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.20%\n43727×", labeldistance="0.50", penwidth="0.50"];
	"Graph::Graph(int)" -> "std::vector<int, std::allocator<int> >::_M_default_append(unsigned long)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.08%\n244992×", labeldistance="0.50", penwidth="0.50"];
	"Graph::calculateFirstNextNeighbours()" [color="#0d1c77", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::calculateFirstNextNeighbours()\n3.49%\n(1.34%)\n43728×"];
	"Graph::calculateFirstNextNeighbours()" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.57%\n288720×", labeldistance="0.50", penwidth="0.50"];
	"Graph::calculateFirstNextNeighbours()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.58%\n577440×", labeldistance="0.50", penwidth="0.50"];
	"Graph::calculateNeighboursLists()" [color="#0d1f78", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::calculateNeighboursLists()\n4.14%\n(1.71%)\n21864×"];
	"Graph::calculateNeighboursLists()" -> "void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.43%\n453841×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getComplement() const" [color="#0d2c7c", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::getComplement() const\n7.12%\n(1.18%)\n10932×"];
	"Graph::getComplement() const" -> "Graph::Graph(int)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.39%\n10932×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getComplement() const" -> "Graph::calculateFirstNextNeighbours()" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.19%\n10932×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getComplement() const" -> "Graph::calculateNeighboursLists()" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.37%\n10932×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getInduced(vec<int>) const" [color="#0d1d78", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::getInduced(vec<int>) const\n3.86%\n(0.56%)\n10924×"];
	"Graph::getInduced(vec<int>) const" -> "Graph::Graph(int)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.44%\n10924×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getInduced(vec<int>) const" -> "Graph::calculateFirstNextNeighbours()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.97%\n10924×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getInduced(vec<int>) const" -> "Graph::calculateNeighboursLists()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.78%\n10924×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getNextNeighbour(int, int) const" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::getNextNeighbour(int, int) const\n0.62%\n(0.62%)\n1033308×"];
	"_int_free" [color="#0d4281", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n_int_free\n11.37%\n(11.22%)\n7105178×"];
	"_int_malloc" [color="#0d3a80", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n_int_malloc\n9.95%\n(9.87%)\n7105185×"];
	"_start" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\n_start\n99.95%\n(0.00%)\n1×"];
	"_start" -> "(below main)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.95%\n1×", labeldistance="4.00", penwidth="4.00"];
	"allShortestPathsWithPredicate(Graph const&, std::function<bool (int)>)" [color="#0d387f", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nallShortestPathsWithPredicate(Graph const&, std::function<bool (int)>)\n9.54%\n(3.60%)\n2788×"];
	"allShortestPathsWithPredicate(Graph const&, std::function<bool (int)>)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.21%\n73776×", labeldistance="0.50", penwidth="0.50"];
	"allShortestPathsWithPredicate(Graph const&, std::function<bool (int)>)" -> "std::_Function_handler<bool (int), containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)::{lambda(int)#1}>::_M_invoke(std::_Any_data const&, int&&)" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.82%\n3023160×", labeldistance="0.50", penwidth="0.50"];
	"allShortestPathsWithPredicate(Graph const&, std::function<bool (int)>)" -> "void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.28%\n669566×", labeldistance="0.50", penwidth="0.50"];
	"containsJewelNaive(Graph const&)" [color="#0d2079", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsJewelNaive(Graph const&)\n4.54%\n(0.03%)\n16×"];
	"containsJewelNaive(Graph const&)" -> "isJewel(Graph const&, vec<int> const&)" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.28%\n91612×", labeldistance="0.50", penwidth="0.50"];
	"containsJewelNaive(Graph const&)" -> "nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.23%\n91612×", labeldistance="0.50", penwidth="0.50"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" [color="#0aab3b", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)\n42.44%\n(2.99%)\n2788×"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" -> "allShortestPathsWithPredicate(Graph const&, std::function<bool (int)>)" [arrowsize="0.35", color="#0d387f", fontcolor="#0d387f", fontsize="10.00", label="9.54%\n2788×", labeldistance="0.50", penwidth="0.50"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" -> "nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" [arrowsize="0.54", color="#0c9981", fontcolor="#0c9981", fontsize="10.00", label="29.24%\n1972674×", labeldistance="1.17", penwidth="1.17"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.68%\n336040×", labeldistance="0.50", penwidth="0.50"];
	"containsPyramid(Graph const&)" [color="#0d1b77", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsPyramid(Graph const&)\n3.45%\n(0.00%)\n16×"];
	"containsPyramid(Graph const&)" -> "findPyramid(Graph const&)" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.45%\n16×", labeldistance="0.50", penwidth="0.50"];
	"containsT1(Graph const&)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsT1(Graph const&)\n0.86%\n(0.00%)\n16×"];
	"containsT1(Graph const&)" -> "findHoleOfSize(Graph const&, int)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.86%\n16×", labeldistance="0.50", penwidth="0.50"];
	"containsT2(Graph const&)" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsT2(Graph const&)\n1.71%\n(0.00%)\n16×"];
	"containsT2(Graph const&)" -> "findT2(Graph const&)" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.71%\n16×", labeldistance="0.50", penwidth="0.50"];
	"containsT3(Graph const&)" [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsT3(Graph const&)\n2.59%\n(0.00%)\n16×"];
	"containsT3(Graph const&)" -> "findT3(Graph const&)" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.59%\n16×", labeldistance="0.50", penwidth="0.50"];
	"dfsWith(Graph const&, vec<int>&, int, std::function<void (int)>, std::function<bool (int)>)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ndfsWith(Graph const&, vec<int>&, int, std::function<void (int)>, std::function<bool (int)>)\n0.66%\n(0.16%)\n119334×"];
	"findHoleOfSize(Graph const&, int)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindHoleOfSize(Graph const&, int)\n0.86%\n(0.00%)\n16×"];
	"findHoleOfSize(Graph const&, int)" -> "nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.86%\n380×", labeldistance="0.50", penwidth="0.50"];
	"findPyramid(Graph const&)" [color="#0d1b77", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindPyramid(Graph const&)\n3.45%\n(0.20%)\n16×"];
	"findPyramid(Graph const&)" -> "generateTuples(int, int)" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.83%\n97×", labeldistance="0.50", penwidth="0.50"];
	"findPyramid(Graph const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.54%\n218597×", labeldistance="0.50", penwidth="0.50"];
	"findPyramid(Graph const&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n66058×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)\n0.52%\n(0.08%)\n9274×"];
	"findT2(Graph const&)" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindT2(Graph const&)\n1.71%\n(0.03%)\n16×"];
	"findT2(Graph const&)" -> "Graph::getComplement() const" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.66%\n1052×", labeldistance="0.50", penwidth="0.50"];
	"findT2(Graph const&)" -> "getComponentsOfInducedGraph(Graph const&, vec<int> const&)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.68%\n1052×", labeldistance="0.50", penwidth="0.50"];
	"findT2(Graph const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n65256×", labeldistance="0.50", penwidth="0.50"];
	"findT3(Graph const&)" [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindT3(Graph const&)\n2.59%\n(0.04%)\n16×"];
	"findT3(Graph const&)" -> "Graph::getComplement() const" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.15%\n1774×", labeldistance="0.50", penwidth="0.50"];
	"findT3(Graph const&)" -> "getComponentsOfInducedGraph(Graph const&, vec<int> const&)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.15%\n1774×", labeldistance="0.50", penwidth="0.50"];
	"findT3(Graph const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n75320×", labeldistance="0.50", penwidth="0.50"];
	free [color="#0d4e84", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\nfree\n13.65%\n(2.28%)\n7105180×"];
	free -> "_int_free" [arrowsize="0.35", color="#0d4281", fontcolor="#0d4281", fontsize="10.00", label="11.37%\n7105178×", labeldistance="0.50", penwidth="0.50"];
	"generateTuples(int, int)" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngenerateTuples(int, int)\n1.83%\n(0.32%)\n97×"];
	"generateTuples(int, int)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.29%\n149185×", labeldistance="0.50", penwidth="0.50"];
	"generateTuples(int, int)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.99%\n297117×", labeldistance="0.50", penwidth="0.50"];
	"getComponents(Graph const&)" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetComponents(Graph const&)\n1.40%\n(0.15%)\n10924×"];
	"getComponents(Graph const&)" -> "dfsWith(Graph const&, vec<int>&, int, std::function<void (int)>, std::function<bool (int)>)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.64%\n117768×", labeldistance="0.50", penwidth="0.50"];
	"getComponents(Graph const&)" -> "void std::vector<vec<int>, std::allocator<vec<int> > >::emplace_back<vec<int> >(vec<int>&&)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.53%\n117768×", labeldistance="0.50", penwidth="0.50"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" [color="#0d2d7c", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetComponentsOfInducedGraph(Graph const&, vec<int> const&)\n7.23%\n(0.28%)\n10924×"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" -> "Graph::getInduced(vec<int>) const" [arrowsize="0.35", color="#0d1d78", fontcolor="#0d1d78", fontsize="10.00", label="3.86%\n10924×", labeldistance="0.50", penwidth="0.50"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" -> "getComponents(Graph const&)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.40%\n10924×", labeldistance="0.50", penwidth="0.50"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.12%\n550001×", labeldistance="0.50", penwidth="0.50"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.37%\n142401×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" [color="#0aae30", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetPossibleNearCleaners(Graph const&)\n44.20%\n(6.82%)\n16×"];
	"getPossibleNearCleaners(Graph const&)" -> "getXforRelevantTriple(Graph const&, vec<int>)" [arrowsize="0.35", color="#0d4682", fontcolor="#0d4682", fontsize="10.00", label="12.20%\n8098×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d1a77", fontcolor="#0d1a77", fontsize="10.00", label="3.13%\n1625154×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.52%\n605048×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [arrowsize="0.35", color="#0d2279", fontcolor="#0d2279", fontsize="10.00", label="4.91%\n1604666×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<int>, int const&)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.45%\n1112184×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree_increment(std::_Rb_tree_node_base const*)" [arrowsize="0.35", color="#0d1e78", fontcolor="#0d1e78", fontsize="10.00", label="3.97%\n17922230×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.50%\n585392×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" [arrowsize="0.35", color="#0d387f", fontcolor="#0d387f", fontsize="10.00", label="9.54%\n796580×", labeldistance="0.50", penwidth="0.50"];
	"getXforRelevantTriple(Graph const&, vec<int>)" [color="#0d4682", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetXforRelevantTriple(Graph const&, vec<int>)\n12.20%\n(0.13%)\n8098×"];
	"getXforRelevantTriple(Graph const&, vec<int>)" -> "Graph::getComplement() const" [arrowsize="0.35", color="#0d247a", fontcolor="#0d247a", fontsize="10.00", label="5.31%\n8098×", labeldistance="0.50", penwidth="0.50"];
	"getXforRelevantTriple(Graph const&, vec<int>)" -> "getComponentsOfInducedGraph(Graph const&, vec<int> const&)" [arrowsize="0.35", color="#0d247a", fontcolor="#0d247a", fontsize="10.00", label="5.40%\n8098×", labeldistance="0.50", penwidth="0.50"];
	"getXforRelevantTriple(Graph const&, vec<int>)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.75%\n381872×", labeldistance="0.50", penwidth="0.50"];
	"isAPath(Graph const&, vec<int> const&, bool, bool) [clone .part.173]" [color="#0d3e80", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisAPath(Graph const&, vec<int> const&, bool, bool) [clone .part.173]\n10.57%\n(10.57%)\n5395166×"];
	"isDistinctValues(vec<int> const&)" [color="#0d337e", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisDistinctValues(vec<int> const&)\n8.58%\n(8.58%)\n6616586×"];
	"isJewel(Graph const&, vec<int> const&)" [color="#0d1b77", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisJewel(Graph const&, vec<int> const&)\n3.28%\n(0.67%)\n91612×"];
	"isJewel(Graph const&, vec<int> const&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.14%\n457980×", labeldistance="0.50", penwidth="0.50"];
	"isJewel(Graph const&, vec<int> const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.05%\n91596×", labeldistance="0.50", penwidth="0.50"];
	"isJewel(Graph const&, vec<int> const&)" -> "std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.32%\n457979×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisPerfectGraph(Graph const&)\n99.93%\n(0.00%)\n8×"];
	"isPerfectGraph(Graph const&)" -> "containsJewelNaive(Graph const&)" [arrowsize="0.35", color="#0d2079", fontcolor="#0d2079", fontsize="10.00", label="4.54%\n16×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" [arrowsize="0.65", color="#0aab3b", fontcolor="#0aab3b", fontsize="10.00", label="42.44%\n2788×", labeldistance="1.70", penwidth="1.70"];
	"isPerfectGraph(Graph const&)" -> "containsPyramid(Graph const&)" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.45%\n16×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "containsT1(Graph const&)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.86%\n16×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "containsT2(Graph const&)" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.71%\n16×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "containsT3(Graph const&)" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.59%\n16×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "getPossibleNearCleaners(Graph const&)" [arrowsize="0.66", color="#0aae30", fontcolor="#0aae30", fontsize="10.00", label="44.20%\n16×", labeldistance="1.77", penwidth="1.77"];
	main [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nmain\n99.95%\n(0.00%)\n1×"];
	main -> "testWithStats(Graph const&, bool)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.93%\n8×", labeldistance="4.00", penwidth="4.00"];
	malloc [color="#0c6189", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\nmalloc\n16.98%\n(6.98%)\n7105223×"];
	malloc -> "_int_malloc" [arrowsize="0.35", color="#0d3a80", fontcolor="#0d3a80", fontsize="10.00", label="9.95%\n7105184×", labeldistance="0.50", penwidth="0.50"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" [color="#0b9c77", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nnextPathInPlace(Graph const&, vec<int>&, int, bool, bool)\n31.32%\n(1.82%)\n2064666×"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" -> "nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" [arrowsize="0.54", color="#0c9980", fontcolor="#0c9980", fontsize="10.00", label="29.39%\n2064666×", labeldistance="1.18", penwidth="1.18"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" [color="#0c9980", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nnextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)\n29.39%\n(9.67%)\n2064666×"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "Graph::getNextNeighbour(int, int) const" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.62%\n1033308×", labeldistance="0.50", penwidth="0.50"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "isAPath(Graph const&, vec<int> const&, bool, bool) [clone .part.173]" [arrowsize="0.35", color="#0d3d80", fontcolor="#0d3d80", fontsize="10.00", label="10.53%\n5373690×", labeldistance="0.50", penwidth="0.50"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "isDistinctValues(vec<int> const&)" [arrowsize="0.35", color="#0d337e", fontcolor="#0d337e", fontsize="10.00", label="8.54%\n6594746×", labeldistance="0.50", penwidth="0.50"];
	"operator delete(void*)" [color="#0d5085", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\noperator delete(void*)\n13.95%\n(0.30%)\n7105176×"];
	"operator delete(void*)" -> free [arrowsize="0.37", color="#0d4e84", fontcolor="#0d4e84", fontsize="10.00", label="13.65%\n7105177×", labeldistance="0.55", penwidth="0.55"];
	"operator new(unsigned long)" [color="#0c6b8b", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\noperator new(unsigned long)\n18.75%\n(1.82%)\n7105182×"];
	"operator new(unsigned long)" -> malloc [arrowsize="0.41", color="#0c6189", fontcolor="#0c6189", fontsize="10.00", label="16.93%\n7105184×", labeldistance="0.68", penwidth="0.68"];
	"std::_Function_handler<bool (int), containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)::{lambda(int)#1}>::_M_invoke(std::_Any_data const&, int&&)" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Function_handler<bool (int), containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)::{lambda(int)#1}>::_M_invoke(std::_Any_data const&, int&&)\n1.82%\n(1.82%)\n3023160×"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [color="#0d287b", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)\n6.11%\n(1.39%)\n1730461×"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d2179", fontcolor="#0d2179", fontsize="10.00", label="4.72%\n2454265×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<int>, int const&)" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<int>, int const&)\n1.46%\n(1.34%)\n1130940×"];
	"std::_Rb_tree_increment(std::_Rb_tree_node_base const*)" [color="#0d1e78", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\nstd::_Rb_tree_increment(std::_Rb_tree_node_base const*)\n3.97%\n(3.97%)\n17932735×"];
	"std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\nstd::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)\n0.86%\n(0.86%)\n1107151×"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" [color="#0d397f", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)\n9.59%\n(1.00%)\n799360×"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1c77", fontcolor="#0d1c77", fontsize="10.00", label="3.58%\n1428918×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" -> "std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2" [arrowsize="0.35", color="#0d2279", fontcolor="#0d2279", fontsize="10.00", label="5.01%\n751834×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2" [color="#0d2279", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2\n5.01%\n(1.17%)\n1211208×"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1d78", fontcolor="#0d1d78", fontsize="10.00", label="3.84%\n1532086×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2" -> "std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2" [arrowsize="0.35", color="#0d2279", fontcolor="#0d2279", fontsize="10.00", label="459374×", labeldistance="0.50", penwidth="0.50"];
	"std::vector<int, std::allocator<int> >::_M_default_append(unsigned long)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::vector<int, std::allocator<int> >::_M_default_append(unsigned long)\n1.08%\n(0.39%)\n244992×"];
	"std::vector<int, std::allocator<int> >::_M_default_append(unsigned long)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.63%\n244992×", labeldistance="0.50", penwidth="0.50"];
	"testWithStats(Graph const&, bool)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ntestWithStats(Graph const&, bool)\n99.93%\n(0.00%)\n8×"];
	"testWithStats(Graph const&, bool)" -> "isPerfectGraph(Graph const&)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.93%\n8×", labeldistance="4.00", penwidth="4.00"];
	"void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" [color="#0d297b", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nvoid std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)\n6.35%\n(1.52%)\n1285134×"];
	"void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d1275", fontcolor="#0d1275", fontsize="10.00", label="1.38%\n717152×", labeldistance="0.50", penwidth="0.50"];
	"void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.25%\n1285134×", labeldistance="0.50", penwidth="0.50"];
	"void std::vector<vec<int>, std::allocator<vec<int> > >::emplace_back<vec<int> >(vec<int>&&)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nvoid std::vector<vec<int>, std::allocator<vec<int> > >::emplace_back<vec<int> >(vec<int>&&)\n0.53%\n(0.21%)\n117768×"];
	"void std::vector<vec<int>, std::allocator<vec<int> > >::emplace_back<vec<int> >(vec<int>&&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.23%\n54027×", labeldistance="0.50", penwidth="0.50"];
}
