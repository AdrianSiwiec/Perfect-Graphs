digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	"(below main)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n(below main)\n99.93%\n(0.00%)\n1×"];
	"(below main)" -> main [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.92%\n1×", labeldistance="4.00", penwidth="4.00"];
	"0x0000000000000c20" [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="ld-2.24.so\n0x0000000000000c20\n99.99%\n(0.00%)\n0×"];
	"0x0000000000000c20" -> "_start" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.93%\n1×", labeldistance="4.00", penwidth="4.00"];
	"_int_free" [color="#0c658a", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n_int_free\n17.65%\n(17.65%)\n7737007×"];
	"_int_malloc" [color="#0c5185", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n_int_malloc\n14.26%\n(14.26%)\n7737014×"];
	"_start" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\n_start\n99.93%\n(0.00%)\n1×"];
	"_start" -> "(below main)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.93%\n1×", labeldistance="4.00", penwidth="4.00"];
	"containsOddHoleNaive(Graph const&)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\ncontainsOddHoleNaive(Graph const&)\n99.92%\n(0.00%)\n2×"];
	"containsOddHoleNaive(Graph const&)" -> "findOddHoleNaive(Graph const&)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.92%\n2×", labeldistance="4.00", penwidth="4.00"];
	"findHoleOfSize(Graph const&, int)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nfindHoleOfSize(Graph const&, int)\n99.92%\n(0.00%)\n4×"];
	"findHoleOfSize(Graph const&, int)" -> "nextPathInPlace(Graph const&, vec<int>&, int, bool)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.92%\n4×", labeldistance="4.00", penwidth="4.00"];
	"findOddHoleNaive(Graph const&)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nfindOddHoleNaive(Graph const&)\n99.92%\n(0.00%)\n2×"];
	"findOddHoleNaive(Graph const&)" -> "findHoleOfSize(Graph const&, int)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.92%\n4×", labeldistance="4.00", penwidth="4.00"];
	free [color="#0c7b8e", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\nfree\n21.27%\n(3.63%)\n7737009×"];
	free -> "_int_free" [arrowsize="0.42", color="#0c658a", fontcolor="#0c658a", fontsize="10.00", label="17.65%\n7737007×", labeldistance="0.71", penwidth="0.71"];
	"isAPath(Graph const&, vec<int> const&, bool)" [color="#fc1200", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nisAPath(Graph const&, vec<int> const&, bool)\n98.24%\n(1.45%)\n1680696×"];
	"isAPath(Graph const&, vec<int> const&, bool)" -> "isDistinctValues(vec<int> const&)" [arrowsize="0.98", color="#fa2101", fontcolor="#fa2101", fontsize="10.00", label="96.79%\n1680696×", labeldistance="3.87", penwidth="3.87"];
	"isDistinctValues(vec<int> const&)" [color="#fa2101", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nisDistinctValues(vec<int> const&)\n96.79%\n(4.92%)\n1680696×"];
	"isDistinctValues(vec<int> const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [arrowsize="0.51", color="#0c958e", fontcolor="#0c958e", fontsize="10.00", label="26.38%\n1680696×", labeldistance="1.06", penwidth="1.06"];
	"isDistinctValues(vec<int> const&)" -> "std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)" [arrowsize="0.81", color="#81cc07", fontcolor="#81cc07", fontsize="10.00", label="65.49%\n11697648×", labeldistance="2.62", penwidth="2.62"];
	"isPerfectGraphNaive(Graph const&)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nisPerfectGraphNaive(Graph const&)\n99.92%\n(0.00%)\n1×"];
	"isPerfectGraphNaive(Graph const&)" -> "containsOddHoleNaive(Graph const&)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.92%\n2×", labeldistance="4.00", penwidth="4.00"];
	main [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nmain\n99.92%\n(0.00%)\n1×"];
	main -> "testWithStats(Graph const&, bool)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.92%\n1×", labeldistance="4.00", penwidth="4.00"];
	malloc [color="#0c9492", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\nmalloc\n25.44%\n(11.12%)\n7737052×"];
	malloc -> "_int_malloc" [arrowsize="0.38", color="#0c5185", fontcolor="#0c5185", fontsize="10.00", label="14.26%\n7737013×", labeldistance="0.57", penwidth="0.57"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nnextPathInPlace(Graph const&, vec<int>&, int, bool)\n99.92%\n(0.91%)\n4×"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool)" -> "isAPath(Graph const&, vec<int> const&, bool)" [arrowsize="0.99", color="#fc1200", fontcolor="#fc1200", fontsize="10.00", label="98.24%\n1680696×", labeldistance="3.93", penwidth="3.93"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool)" -> "nextTupleInPlace(vec<int>&, int)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.77%\n1680700×", labeldistance="0.50", penwidth="0.50"];
	"nextTupleInPlace(vec<int>&, int)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nnextTupleInPlace(vec<int>&, int)\n0.77%\n(0.77%)\n1680700×"];
	"operator delete(void*)" [color="#0c7e8f", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\noperator delete(void*)\n21.75%\n(0.48%)\n7737005×"];
	"operator delete(void*)" -> free [arrowsize="0.46", color="#0c7b8e", fontcolor="#0c7b8e", fontsize="10.00", label="21.27%\n7737006×", labeldistance="0.85", penwidth="0.85"];
	"operator new(unsigned long)" [color="#0c9885", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\noperator new(unsigned long)\n28.27%\n(2.90%)\n7737011×"];
	"operator new(unsigned long)" -> malloc [arrowsize="0.50", color="#0c9492", fontcolor="#0c9492", fontsize="10.00", label="25.37%\n7737013×", labeldistance="1.01", penwidth="1.01"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [color="#0c958e", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nstd::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)\n26.38%\n(1.89%)\n1680696×"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d4181", fontcolor="#0d4181", fontsize="10.00", label="11.31%\n4021572×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2" [arrowsize="0.36", color="#0d4b84", fontcolor="#0d4b84", fontsize="10.00", label="13.18%\n4021572×", labeldistance="0.53", penwidth="0.53"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2" [color="#0d4b84", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nstd::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2\n13.18%\n(2.74%)\n7736928×"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2" -> "operator delete(void*)" [arrowsize="0.35", color="#0d3d80", fontcolor="#0d3d80", fontsize="10.00", label="10.45%\n3715356×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)'2" [arrowsize="0.36", color="#0d4b84", fontcolor="#0d4b84", fontsize="10.00", label="3715356×", labeldistance="0.53", penwidth="0.53"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)" [color="#0d4e84", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nstd::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)\n13.73%\n(12.55%)\n11697648×"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)" -> "std::_Rb_tree_decrement(std::_Rb_tree_node_base*)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.18%\n2285431×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_decrement(std::_Rb_tree_node_base*)" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\nstd::_Rb_tree_decrement(std::_Rb_tree_node_base*)\n1.18%\n(1.18%)\n2285431×"];
	"std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [color="#0d307d", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\nstd::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)\n7.83%\n(7.83%)\n7736929×"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.215]" [color="#0ab024", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nstd::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.215]\n46.05%\n(9.94%)\n7736928×"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.215]" -> "operator new(unsigned long)" [arrowsize="0.53", color="#0c9885", fontcolor="#0c9885", fontsize="10.00", label="28.27%\n7736928×", labeldistance="1.13", penwidth="1.13"];
	"std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.215]" -> "std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [arrowsize="0.35", color="#0d307d", fontcolor="#0d307d", fontsize="10.00", label="7.83%\n7736927×", labeldistance="0.50", penwidth="0.50"];
	"std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)" [color="#81cc07", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nstd::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)\n65.49%\n(5.72%)\n11697648×"];
	"std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)" [arrowsize="0.37", color="#0d4e84", fontcolor="#0d4e84", fontsize="10.00", label="13.73%\n11697648×", labeldistance="0.55", penwidth="0.55"];
	"std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)" -> "std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&) [clone .isra.215]" [arrowsize="0.68", color="#0ab024", fontcolor="#0ab024", fontsize="10.00", label="46.05%\n7736928×", labeldistance="1.84", penwidth="1.84"];
	"testWithStats(Graph const&, bool)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\ntestWithStats(Graph const&, bool)\n99.92%\n(0.00%)\n1×"];
	"testWithStats(Graph const&, bool)" -> "isPerfectGraphNaive(Graph const&)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.92%\n1×", labeldistance="4.00", penwidth="4.00"];
}
