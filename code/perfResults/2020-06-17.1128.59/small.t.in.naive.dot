digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	"(below main)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n(below main)\n99.91%\n(0.00%)\n1×"];
	"(below main)" -> main [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.90%\n1×", labeldistance="4.00", penwidth="4.00"];
	"0x0000000000000c20" [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="ld-2.24.so\n0x0000000000000c20\n99.99%\n(0.00%)\n0×"];
	"0x0000000000000c20" -> "_start" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.91%\n1×", labeldistance="4.00", penwidth="4.00"];
	"Graph::getNextNeighbour(int, int) const" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nGraph::getNextNeighbour(int, int) const\n2.45%\n(2.45%)\n2250124×"];
	"_int_free" [color="#0c658a", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n_int_free\n17.76%\n(17.75%)\n6247923×"];
	"_int_malloc" [color="#0c5285", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n_int_malloc\n14.35%\n(14.35%)\n6247930×"];
	"_start" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\n_start\n99.91%\n(0.00%)\n1×"];
	"_start" -> "(below main)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.91%\n1×", labeldistance="4.00", penwidth="4.00"];
	"containsOddHoleNaive(Graph const&)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\ncontainsOddHoleNaive(Graph const&)\n99.87%\n(0.00%)\n18×"];
	"containsOddHoleNaive(Graph const&)" -> "findHoleOfSize(Graph const&, int)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.87%\n42×", labeldistance="3.99", penwidth="3.99"];
	"findHoleOfSize(Graph const&, int)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nfindHoleOfSize(Graph const&, int)\n99.87%\n(0.00%)\n42×"];
	"findHoleOfSize(Graph const&, int)" -> "nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.87%\n172×", labeldistance="3.99", penwidth="3.99"];
	free [color="#0c7c8f", fontcolor="#ffffff", fontsize="10.00", label="ld-2.24.so\nfree\n21.40%\n(3.65%)\n6247925×"];
	free -> "_int_free" [arrowsize="0.42", color="#0c658a", fontcolor="#0c658a", fontsize="10.00", label="17.76%\n6247923×", labeldistance="0.71", penwidth="0.71"];
	"isDistinctValues(vec<int> const&)" [color="#0c8a92", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nisDistinctValues(vec<int> const&)\n23.60%\n(23.60%)\n7863664×"];
	"isPerfectGraphNaive(Graph const&)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nisPerfectGraphNaive(Graph const&)\n99.88%\n(0.00%)\n9×"];
	"isPerfectGraphNaive(Graph const&)" -> "containsOddHoleNaive(Graph const&)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.87%\n18×", labeldistance="3.99", penwidth="3.99"];
	main [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nmain\n99.90%\n(0.00%)\n1×"];
	main -> "testWithStats(Graph const&, bool)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.88%\n9×", labeldistance="4.00", penwidth="4.00"];
	malloc [color="#0c9491", fontcolor="#ffffff", fontsize="10.00", label="ld-2.24.so\nmalloc\n25.61%\n(11.19%)\n6247968×"];
	malloc -> "_int_malloc" [arrowsize="0.38", color="#0c5285", fontcolor="#0c5285", fontsize="10.00", label="14.35%\n6247929×", labeldistance="0.57", penwidth="0.57"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nnextPathInPlace(Graph const&, vec<int>&, int, bool, bool)\n99.87%\n(0.00%)\n172×"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" -> "nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.87%\n172×", labeldistance="3.99", penwidth="3.99"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\nnextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)\n99.87%\n(23.32%)\n172×"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "Graph::getNextNeighbour(int, int) const" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.45%\n2250124×", labeldistance="0.50", penwidth="0.50"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "isDistinctValues(vec<int> const&)" [arrowsize="0.49", color="#0c8a92", fontcolor="#0c8a92", fontsize="10.00", label="23.60%\n7863534×", labeldistance="0.94", penwidth="0.94"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "operator delete(void*)" [arrowsize="0.47", color="#0c7f8f", fontcolor="#0c7f8f", fontsize="10.00", label="21.88%\n6246527×", labeldistance="0.88", penwidth="0.88"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "operator new(unsigned long)" [arrowsize="0.53", color="#0c9885", fontcolor="#0c9885", fontsize="10.00", label="28.44%\n6246485×", labeldistance="1.14", penwidth="1.14"];
	"operator delete(void*)" [color="#0c7f8f", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\noperator delete(void*)\n21.89%\n(0.49%)\n6247921×"];
	"operator delete(void*)" -> free [arrowsize="0.46", color="#0c7c8f", fontcolor="#0c7c8f", fontsize="10.00", label="21.40%\n6247922×", labeldistance="0.86", penwidth="0.86"];
	"operator new(unsigned long)" [color="#0c9885", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\noperator new(unsigned long)\n28.45%\n(2.92%)\n6247927×"];
	"operator new(unsigned long)" -> malloc [arrowsize="0.51", color="#0c9491", fontcolor="#0c9491", fontsize="10.00", label="25.53%\n6247929×", labeldistance="1.02", penwidth="1.02"];
	"testWithStats(Graph const&, bool)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="naive.e\ntestWithStats(Graph const&, bool)\n99.88%\n(0.00%)\n9×"];
	"testWithStats(Graph const&, bool)" -> "isPerfectGraphNaive(Graph const&)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.88%\n9×", labeldistance="4.00", penwidth="4.00"];
}
