digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	"(below main)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n(below main)\n99.91%\n(0.00%)\n1×"];
	"(below main)" -> main [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.91%\n1×", labeldistance="4.00", penwidth="4.00"];
	"0x0000000000000c20" [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="ld-2.24.so\n0x0000000000000c20\n99.99%\n(0.00%)\n0×"];
	"0x0000000000000c20" -> "_start" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.91%\n1×", labeldistance="4.00", penwidth="4.00"];
	"Graph::Graph(int)" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::Graph(int)\n2.55%\n(0.20%)\n11314×"];
	"Graph::Graph(int)" -> "Graph::calculateFirstNextNeighbours()" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.20%\n11314×", labeldistance="0.50", penwidth="0.50"];
	"Graph::Graph(int)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.19%\n22627×", labeldistance="0.50", penwidth="0.50"];
	"Graph::Graph(int)" -> "std::vector<int, std::allocator<int> >::_M_default_append(unsigned long)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.95%\n118392×", labeldistance="0.50", penwidth="0.50"];
	"Graph::calculateFirstNextNeighbours()" [color="#0d1a77", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::calculateFirstNextNeighbours()\n3.10%\n(1.16%)\n22628×"];
	"Graph::calculateFirstNextNeighbours()" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.50%\n141020×", labeldistance="0.50", penwidth="0.50"];
	"Graph::calculateFirstNextNeighbours()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.43%\n282040×", labeldistance="0.50", penwidth="0.50"];
	"Graph::calculateNeighboursLists()" [color="#0d1b77", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::calculateNeighboursLists()\n3.41%\n(1.39%)\n11314×"];
	"Graph::calculateNeighboursLists()" -> "void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="2.02%\n211602×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getComplement() const" [color="#0d277a", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::getComplement() const\n6.00%\n(0.95%)\n5657×"];
	"Graph::getComplement() const" -> "Graph::Graph(int)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.24%\n5657×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getComplement() const" -> "Graph::calculateFirstNextNeighbours()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.04%\n5657×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getComplement() const" -> "Graph::calculateNeighboursLists()" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.78%\n5657×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getInduced(vec<int>) const" [color="#0d1b77", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nGraph::getInduced(vec<int>) const\n3.34%\n(0.45%)\n5652×"];
	"Graph::getInduced(vec<int>) const" -> "Graph::Graph(int)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.31%\n5652×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getInduced(vec<int>) const" -> "Graph::calculateFirstNextNeighbours()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.86%\n5652×", labeldistance="0.50", penwidth="0.50"];
	"Graph::getInduced(vec<int>) const" -> "Graph::calculateNeighboursLists()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.63%\n5652×", labeldistance="0.50", penwidth="0.50"];
	"_int_free" [color="#0c5c88", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n_int_free\n16.13%\n(15.99%)\n5502010×"];
	"_int_malloc" [color="#0c5586", fontcolor="#ffffff", fontsize="10.00", label="libc-2.24.so\n_int_malloc\n14.97%\n(14.92%)\n5502017×"];
	"_start" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\n_start\n99.91%\n(0.00%)\n1×"];
	"_start" -> "(below main)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.91%\n1×", labeldistance="4.00", penwidth="4.00"];
	"containsJewelNaive(Graph const&)" [color="#0d1e78", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsJewelNaive(Graph const&)\n4.10%\n(0.02%)\n10×"];
	"containsJewelNaive(Graph const&)" -> "isJewel(Graph const&, vec<int> const&)" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.38%\n36978×", labeldistance="0.50", penwidth="0.50"];
	"containsJewelNaive(Graph const&)" -> "nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.70%\n36978×", labeldistance="0.50", penwidth="0.50"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" [color="#20ba09", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)\n53.18%\n(2.00%)\n1302×"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" -> "findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" [arrowsize="0.41", color="#0c5e88", fontcolor="#0c5e88", fontsize="10.00", label="16.49%\n126380×", labeldistance="0.66", penwidth="0.66"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" -> "nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" [arrowsize="0.58", color="#0ba06a", fontcolor="#0ba06a", fontsize="10.00", label="33.99%\n662533×", labeldistance="1.36", penwidth="1.36"];
	"containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.45%\n121482×", labeldistance="0.50", penwidth="0.50"];
	"containsPyramid(Graph const&)" [color="#0d1675", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsPyramid(Graph const&)\n2.15%\n(0.00%)\n10×"];
	"containsPyramid(Graph const&)" -> "findPyramid(Graph const&)" [arrowsize="0.35", color="#0d1675", fontcolor="#0d1675", fontsize="10.00", label="2.15%\n10×", labeldistance="0.50", penwidth="0.50"];
	"containsT1(Graph const&)" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsT1(Graph const&)\n1.19%\n(0.00%)\n10×"];
	"containsT1(Graph const&)" -> "findHoleOfSize(Graph const&, int)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.19%\n10×", labeldistance="0.50", penwidth="0.50"];
	"containsT2(Graph const&)" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsT2(Graph const&)\n1.43%\n(0.00%)\n10×"];
	"containsT2(Graph const&)" -> "findT2(Graph const&)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.43%\n10×", labeldistance="0.50", penwidth="0.50"];
	"containsT3(Graph const&)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ncontainsT3(Graph const&)\n2.24%\n(0.00%)\n10×"];
	"containsT3(Graph const&)" -> "findT3(Graph const&)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.24%\n10×", labeldistance="0.50", penwidth="0.50"];
	"dfsWith(Graph const&, vec<int>&, int, std::function<void (int)>, std::function<bool (int)>)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ndfsWith(Graph const&, vec<int>&, int, std::function<void (int)>, std::function<bool (int)>)\n0.58%\n(0.14%)\n57648×"];
	"findHoleOfSize(Graph const&, int)" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindHoleOfSize(Graph const&, int)\n1.19%\n(0.00%)\n10×"];
	"findHoleOfSize(Graph const&, int)" -> "nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.19%\n200×", labeldistance="0.50", penwidth="0.50"];
	"findPyramid(Graph const&)" [color="#0d1675", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindPyramid(Graph const&)\n2.15%\n(0.12%)\n10×"];
	"findPyramid(Graph const&)" -> "generateTuples(int, int)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.12%\n40×", labeldistance="0.50", penwidth="0.50"];
	"findPyramid(Graph const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.33%\n74170×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" [color="#0c6089", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)\n16.84%\n(4.15%)\n130108×"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.72%\n649340×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.58%\n130108×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" -> "std::_Deque_base<int, std::allocator<int> >::_M_initialize_map(unsigned long)" [arrowsize="0.35", color="#0d2179", fontcolor="#0d2179", fontsize="10.00", label="4.63%\n259736×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" -> "std::_Function_handler<bool (int), containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)::{lambda(int)#1}>::_M_invoke(std::_Any_data const&, int&&)" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.38%\n2265363×", labeldistance="0.50", penwidth="0.50"];
	"findShortestPathWithPredicate(Graph const&, int, int, std::function<bool (int)>)" -> "void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.27%\n253605×", labeldistance="0.50", penwidth="0.50"];
	"findT2(Graph const&)" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindT2(Graph const&)\n1.43%\n(0.03%)\n10×"];
	"findT2(Graph const&)" -> "Graph::getComplement() const" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.54%\n532×", labeldistance="0.50", penwidth="0.50"];
	"findT2(Graph const&)" -> "getComponentsOfInducedGraph(Graph const&, vec<int> const&)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.57%\n532×", labeldistance="0.50", penwidth="0.50"];
	"findT2(Graph const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n30440×", labeldistance="0.50", penwidth="0.50"];
	"findT3(Graph const&)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nfindT3(Graph const&)\n2.24%\n(0.04%)\n10×"];
	"findT3(Graph const&)" -> "Graph::getComplement() const" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.97%\n920×", labeldistance="0.50", penwidth="0.50"];
	"findT3(Graph const&)" -> "getComponentsOfInducedGraph(Graph const&, vec<int> const&)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.02%\n920×", labeldistance="0.50", penwidth="0.50"];
	"findT3(Graph const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n36710×", labeldistance="0.50", penwidth="0.50"];
	free [color="#0c6f8c", fontcolor="#ffffff", fontsize="10.00", label="ld-2.24.so\nfree\n19.30%\n(3.17%)\n5502012×"];
	free -> "_int_free" [arrowsize="0.40", color="#0c5c88", fontcolor="#0c5c88", fontsize="10.00", label="16.13%\n5502010×", labeldistance="0.65", penwidth="0.65"];
	"generateTuples(int, int)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngenerateTuples(int, int)\n1.12%\n(0.19%)\n40×"];
	"generateTuples(int, int)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n50632×", labeldistance="0.50", penwidth="0.50"];
	"generateTuples(int, int)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.61%\n100752×", labeldistance="0.50", penwidth="0.50"];
	"getComponents(Graph const&)" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetComponents(Graph const&)\n1.26%\n(0.13%)\n5652×"];
	"getComponents(Graph const&)" -> "dfsWith(Graph const&, vec<int>&, int, std::function<void (int)>, std::function<bool (int)>)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.56%\n56914×", labeldistance="0.50", penwidth="0.50"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" [color="#0d297b", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetComponentsOfInducedGraph(Graph const&, vec<int> const&)\n6.35%\n(0.24%)\n5652×"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" -> "Graph::getInduced(vec<int>) const" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.34%\n5652×", labeldistance="0.50", penwidth="0.50"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" -> "getComponents(Graph const&)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.26%\n5652×", labeldistance="0.50", penwidth="0.50"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.02%\n267958×", labeldistance="0.50", penwidth="0.50"];
	"getComponentsOfInducedGraph(Graph const&, vec<int> const&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.32%\n68821×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" [color="#0ba262", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetPossibleNearCleaners(Graph const&)\n35.49%\n(5.55%)\n10×"];
	"getPossibleNearCleaners(Graph const&)" -> "getXforRelevantTriple(Graph const&, vec<int>)" [arrowsize="0.35", color="#0d3e80", fontcolor="#0d3e80", fontsize="10.00", label="10.56%\n4200×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.41%\n696340×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1d78", fontcolor="#0d1d78", fontsize="10.00", label="3.83%\n851262×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [arrowsize="0.35", color="#0d1c77", fontcolor="#0d1c77", fontsize="10.00", label="3.59%\n685658×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<int>, int const&)" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.71%\n1048352×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree_increment(std::_Rb_tree_node_base const*)" [arrowsize="0.35", color="#0d1977", fontcolor="#0d1977", fontsize="10.00", label="3.00%\n7551060×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.08%\n841026×", labeldistance="0.50", penwidth="0.50"];
	"getPossibleNearCleaners(Graph const&)" -> "std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" [arrowsize="0.35", color="#0d1c77", fontcolor="#0d1c77", fontsize="10.00", label="3.62%\n177217×", labeldistance="0.50", penwidth="0.50"];
	"getXforRelevantTriple(Graph const&, vec<int>)" [color="#0d3e80", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ngetXforRelevantTriple(Graph const&, vec<int>)\n10.56%\n(0.13%)\n4200×"];
	"getXforRelevantTriple(Graph const&, vec<int>)" -> "Graph::getComplement() const" [arrowsize="0.35", color="#0d2078", fontcolor="#0d2078", fontsize="10.00", label="4.49%\n4200×", labeldistance="0.50", penwidth="0.50"];
	"getXforRelevantTriple(Graph const&, vec<int>)" -> "getComponentsOfInducedGraph(Graph const&, vec<int> const&)" [arrowsize="0.35", color="#0d2179", fontcolor="#0d2179", fontsize="10.00", label="4.76%\n4200×", labeldistance="0.50", penwidth="0.50"];
	"getXforRelevantTriple(Graph const&, vec<int>)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.66%\n187090×", labeldistance="0.50", penwidth="0.50"];
	"getXforRelevantTriple(Graph const&, vec<int>)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n32096×", labeldistance="0.50", penwidth="0.50"];
	"isAPath(Graph const&, vec<int> const&, bool, bool) [clone .part.167]" [color="#0d307d", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisAPath(Graph const&, vec<int> const&, bool, bool) [clone .part.167]\n7.94%\n(7.94%)\n1751100×"];
	"isDistinctValues(vec<int> const&)" [color="#0d2379", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisDistinctValues(vec<int> const&)\n5.20%\n(5.20%)\n2224894×"];
	"isJewel(Graph const&, vec<int> const&)" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisJewel(Graph const&, vec<int> const&)\n2.38%\n(0.48%)\n36978×"];
	"isJewel(Graph const&, vec<int> const&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.83%\n184840×", labeldistance="0.50", penwidth="0.50"];
	"isJewel(Graph const&, vec<int> const&)" -> "std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.76%\n36968×", labeldistance="0.50", penwidth="0.50"];
	"isJewel(Graph const&, vec<int> const&)" -> "std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n184839×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nisPerfectGraph(Graph const&)\n99.89%\n(0.00%)\n5×"];
	"isPerfectGraph(Graph const&)" -> "containsJewelNaive(Graph const&)" [arrowsize="0.35", color="#0d1e78", fontcolor="#0d1e78", fontsize="10.00", label="4.10%\n10×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)" [arrowsize="0.73", color="#20ba09", fontcolor="#20ba09", fontsize="10.00", label="53.18%\n1302×", labeldistance="2.13", penwidth="2.13"];
	"isPerfectGraph(Graph const&)" -> "containsPyramid(Graph const&)" [arrowsize="0.35", color="#0d1675", fontcolor="#0d1675", fontsize="10.00", label="2.15%\n10×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "containsT1(Graph const&)" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.19%\n10×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "containsT2(Graph const&)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.43%\n10×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "containsT3(Graph const&)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.24%\n10×", labeldistance="0.50", penwidth="0.50"];
	"isPerfectGraph(Graph const&)" -> "getPossibleNearCleaners(Graph const&)" [arrowsize="0.60", color="#0ba262", fontcolor="#0ba262", fontsize="10.00", label="35.49%\n10×", labeldistance="1.42", penwidth="1.42"];
	main [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nmain\n99.91%\n(0.00%)\n1×"];
	main -> "testWithStats(Graph const&, bool)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.89%\n5×", labeldistance="4.00", penwidth="4.00"];
	malloc [color="#0c9293", fontcolor="#ffffff", fontsize="10.00", label="ld-2.24.so\nmalloc\n24.75%\n(9.71%)\n5502055×"];
	malloc -> "_int_malloc" [arrowsize="0.39", color="#0c5586", fontcolor="#0c5586", fontsize="10.00", label="14.97%\n5502016×", labeldistance="0.60", penwidth="0.60"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" [color="#0ba45b", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nnextPathInPlace(Graph const&, vec<int>&, int, bool, bool)\n36.88%\n(0.59%)\n699711×"];
	"nextPathInPlace(Graph const&, vec<int>&, int, bool, bool)" -> "nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" [arrowsize="0.60", color="#0ba35e", fontcolor="#0ba35e", fontsize="10.00", label="36.26%\n699711×", labeldistance="1.45", penwidth="1.45"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" [color="#0ba35e", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nnextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)\n36.26%\n(7.58%)\n699711×"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "isAPath(Graph const&, vec<int> const&, bool, bool) [clone .part.167]" [arrowsize="0.35", color="#0d307d", fontcolor="#0d307d", fontsize="10.00", label="7.90%\n1741300×", labeldistance="0.50", penwidth="0.50"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "isDistinctValues(vec<int> const&)" [arrowsize="0.35", color="#0d2379", fontcolor="#0d2379", fontsize="10.00", label="5.18%\n2214904×", labeldistance="0.50", penwidth="0.50"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d2a7b", fontcolor="#0d2a7b", fontsize="10.00", label="6.53%\n1889713×", labeldistance="0.50", penwidth="0.50"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d337e", fontcolor="#0d337e", fontsize="10.00", label="8.45%\n1882936×", labeldistance="0.50", penwidth="0.50"];
	"nextPathInPlaceInternal(Graph const&, vec<int>&, int, bool, bool)" -> "void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n13574×", labeldistance="0.50", penwidth="0.50"];
	"operator delete(void*)" [color="#0c718c", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\noperator delete(void*)\n19.72%\n(0.42%)\n5502008×"];
	"operator delete(void*)" -> free [arrowsize="0.44", color="#0c6f8c", fontcolor="#0c6f8c", fontsize="10.00", label="19.30%\n5502009×", labeldistance="0.77", penwidth="0.77"];
	"operator new(unsigned long)" [color="#0c968a", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\noperator new(unsigned long)\n27.20%\n(2.53%)\n5502014×"];
	"operator new(unsigned long)" -> malloc [arrowsize="0.50", color="#0c9193", fontcolor="#0c9193", fontsize="10.00", label="24.67%\n5502016×", labeldistance="0.99", penwidth="0.99"];
	"std::_Deque_base<int, std::allocator<int> >::_M_initialize_map(unsigned long)" [color="#0d2179", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Deque_base<int, std::allocator<int> >::_M_initialize_map(unsigned long)\n4.63%\n(0.56%)\n259736×"];
	"std::_Deque_base<int, std::allocator<int> >::_M_initialize_map(unsigned long)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1e78", fontcolor="#0d1e78", fontsize="10.00", label="4.07%\n519472×", labeldistance="0.50", penwidth="0.50"];
	"std::_Function_handler<bool (int), containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)::{lambda(int)#1}>::_M_invoke(std::_Any_data const&, int&&)" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Function_handler<bool (int), containsOddHoleWithNearCleanerX(Graph const&, std::set<int, std::less<int>, std::allocator<int> > const&)::{lambda(int)#1}>::_M_invoke(std::_Any_data const&, int&&)\n2.38%\n(2.38%)\n2265363×"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" [color="#0d2078", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)\n4.47%\n(1.04%)\n739630×"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.43%\n993398×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<int>, int const&)" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<int>, int const&)\n1.74%\n(1.63%)\n1069964×"];
	"std::_Rb_tree_increment(std::_Rb_tree_node_base const*)" [color="#0d1977", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\nstd::_Rb_tree_increment(std::_Rb_tree_node_base const*)\n3.00%\n(3.00%)\n7555812×"];
	"std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.22\nstd::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)\n1.35%\n(1.35%)\n1056421×"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" [color="#0d1c77", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)\n3.65%\n(0.40%)\n178514×"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.41%\n312852×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)" -> "std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.85%\n167456×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2\n1.85%\n(0.43%)\n253958×"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.42%\n314018×", labeldistance="0.50", penwidth="0.50"];
	"std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2" -> "std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int> const*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)'2" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="86502×", labeldistance="0.50", penwidth="0.50"];
	"std::vector<int, std::allocator<int> >::_M_default_append(unsigned long)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nstd::vector<int, std::allocator<int> >::_M_default_append(unsigned long)\n0.95%\n(0.34%)\n118392×"];
	"std::vector<int, std::allocator<int> >::_M_default_append(unsigned long)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.56%\n118392×", labeldistance="0.50", penwidth="0.50"];
	"testWithStats(Graph const&, bool)" [color="#ff0100", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\ntestWithStats(Graph const&, bool)\n99.89%\n(0.00%)\n5×"];
	"testWithStats(Graph const&, bool)" -> "isPerfectGraph(Graph const&)" [arrowsize="1.00", color="#ff0100", fontcolor="#ff0100", fontsize="10.00", label="99.89%\n5×", labeldistance="4.00", penwidth="4.00"];
	"void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" [color="#0d2279", fontcolor="#ffffff", fontsize="10.00", label="perfect.e\nvoid std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)\n4.97%\n(1.19%)\n554162×"];
	"void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" -> "operator delete(void*)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.10%\n318723×", labeldistance="0.50", penwidth="0.50"];
	"void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.52%\n554162×", labeldistance="0.50", penwidth="0.50"];
}
